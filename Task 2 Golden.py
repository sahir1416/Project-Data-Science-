# -*- coding: utf-8 -*-
"""Time Series .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PZ73x6OfpqCRJLH9d142aQNsrac5OPEn
"""

import pandas as pd

# Load the dataset
file_path = '/content/data.csv'
data = pd.read_csv(file_path)

# Display the first few rows of the dataset
data.head()

# Function to parse dates with different formats
def parse_date(date_str):
    for fmt in ("%m/%d/%Y", "%m-%d-%Y"):
        try:
            return pd.to_datetime(date_str, format=fmt)
        except ValueError:
            pass
    raise ValueError(f"No valid date format found for {date_str}")

# Apply the parse_date function to the 'Date' column
data['Date'] = data['Date'].apply(parse_date)

# Remove currency symbols and convert to numeric
for column in ['Close/Last', 'Open', 'High', 'Low']:
    data[column] = data[column].replace({'\$': '', ',': ''}, regex=True).astype(float)

# Set 'Date' column as the index
data.set_index('Date', inplace=True)

# Display the cleaned data
data.head()

"""Explore the Data"""

import matplotlib.pyplot as plt

# Plot the closing prices
plt.figure(figsize=(12, 6))
plt.plot(data['Close/Last'], label='Close Price')
plt.title('AAPL Stock Price')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.show()

"""Time Series Decomposition"""

from statsmodels.tsa.seasonal import seasonal_decompose

# Decompose the time series
result = seasonal_decompose(data['Close/Last'], model='multiplicative', period=365)

# Plot the decomposition
result.plot()
plt.show()

from statsmodels.tsa.arima.model import ARIMA

# Define the model
model = ARIMA(data['Close/Last'], order=(5, 1, 0))

# Fit the model
model_fit = model.fit()

# Summary of the model
print(model_fit.summary())

# Forecast
forecast = model_fit.forecast(steps=30)

# Plot the forecast
plt.figure(figsize=(12, 6))
plt.plot(data['Close/Last'], label='Historical')
plt.plot(forecast, label='Forecast', color='red')
plt.title('AAPL Stock Price Forecast')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.show()

