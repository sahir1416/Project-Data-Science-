# -*- coding: utf-8 -*-
"""Climate data Analysis .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1szuO8ss4JmAfkAdyEXJ9ZNK8sxLU5AlL
"""

import pandas as pd

# Load the datasets
daily_data = pd.read_csv('daily_data.csv', header=1)
hourly_data = pd.read_csv('hourly_data.csv', header=1)
monthly_data = pd.read_csv('monthly_data.csv', header=1)
three_hours_data = pd.read_csv('/content/three_hour_data.csv', header=1)

daily_data.head()

hourly_data.head()

monthly_data.head()

three_hours_data.head()

# Display the first few rows of each dataset to check for any issues
print("Daily Data:")
print(daily_data.head())

print("\nHourly Data:")
print(hourly_data.head())

print("\nMonthly Data:")
print(monthly_data.head())

print("\nThree Hours Data:")
print(three_hours_data.head())

# Clean the data by handling any mixed data types or missing values

# Example: Convert data to numeric where possible and handle missing values
daily_data = daily_data.apply(pd.to_numeric, errors='coerce')
hourly_data = hourly_data.apply(pd.to_numeric, errors='coerce')
monthly_data = monthly_data.apply(pd.to_numeric, errors='coerce')
three_hours_data = three_hours_data.apply(pd.to_numeric, errors='coerce')

# Drop any rows with missing values or fill them with a method of your choice
daily_data.dropna(inplace=True)
hourly_data.dropna(inplace=True)
monthly_data.dropna(inplace=True)
three_hours_data.dropna(inplace=True)

# Save the cleaned data to new files if needed
daily_data.to_csv('cleaned_daily_data.csv', index=False)
hourly_data.to_csv('cleaned_hourly_data.csv', index=False)
monthly_data.to_csv('cleaned_monthly_data.csv', index=False)
three_hours_data.to_csv('cleaned_three_hours_data.csv', index=False)

import matplotlib.pyplot as plt
import seaborn as sns

# Basic statistics
print(daily_data.describe())
print(hourly_data.describe())
print(monthly_data.describe())
print(three_hours_data.describe())

daily_data.head()

import matplotlib.pyplot as plt
import seaborn as sns

# Visualize the distribution of DailyAverageDryBulbTemperature
#sns.histplot(daily_data['DailyAverageDryBulbTemperature'], kde=True)
#190.0
sns.histplot(daily_data['190.0'], kde=True)
plt.title("Temperature Distribution - Daily Average Dry Bulb Temperature")
plt.xlabel("Temperature")
plt.ylabel("Frequency")
plt.show()

hourly_data.head()

# Check the column names to see how they are being interpreted
print(hourly_data.columns)

"""Error in this:-
sns.histplot(hourly_data['22'], kde=True)
plt.title("Temperature Distribution - Hourly Data")
plt.xlabel("Temperature")
plt.ylabel("Frequency")
plt.show()

But This is not Error ok:-

# Convert the column to numeric if it's not already
hourly_data['22'] = pd.to_numeric(hourly_data['22'], errors='coerce')

# Then plot it
sns.histplot(hourly_data['22'], kde=True)
plt.title("Temperature Distribution - Hourly Data")
plt.xlabel("Temperature")
plt.ylabel("Frequency")
plt.show()

"""



# Convert the column to numeric if it's not already
hourly_data['22'] = pd.to_numeric(hourly_data['22'], errors='coerce')

# Then plot it
sns.histplot(hourly_data['22'], kde=True)
plt.title("Temperature Distribution - Hourly Data")
plt.xlabel("Temperature")
plt.ylabel("Frequency")
plt.show()

daily_data.head()

# Time series plot
daily_data['Date'] = pd.to_datetime(daily_data['2015-01-01T23:59:00'])
plt.plot(daily_data['Date'], daily_data['190.0'])
plt.title("Temperature Over Time - Daily Data")
plt.xlabel("Date")
plt.ylabel("Temperature")
plt.show()

# Convert all columns that can be to numeric, ignoring errors
daily_data_numeric = daily_data.apply(pd.to_numeric, errors='coerce')

# Now, calculate the correlation matrix and plot the heatmap
plt.figure(figsize=(8, 8))
sns.heatmap(daily_data_numeric.corr(), annot=True, cmap='coolwarm')
plt.title("Correlation Heatmap - Daily Data")
plt.show()

# Drop non-numeric columns (which will have NaN after conversion)
#daily_data_numeric = daily_data_numeric.dropna(axis=1, how='all')

# Now, calculate the correlation matrix and plot the heatmap
plt.figure(figsize=(8, 8))
sns.heatmap(daily_data_numeric.corr(), annot=True, cmap='coolwarm')
plt.title("Correlation Heatmap - Daily Data")
plt.show()

"""Box Plots for Seasonal Comparison"""

daily_data.head()

monthly_data.head()

import matplotlib.pyplot as plt
import pandas as pd

# Display the column names
print(daily_data.columns)

# Ensure the date column is in datetime format
daily_data['2015-01-01T23:59:00'] = pd.to_datetime(daily_data['2015-01-01T23:59:00'])
# Replace with your actual date column name

# Display the column names
print(monthly_data.columns)

monthly_data.head()

# Group by month and calculate the mean temperature
monthly_avg_temp = daily_data.groupby(daily_data['2015-01-01T23:59:00'].dt.to_period('M'))['190.0'].mean()  # Replace 'Temperature' with the actual temperature column name

# Plot the monthly average temperature
plt.plot(monthly_avg_temp.index.to_timestamp(), monthly_avg_temp)
plt.title("Monthly Average Temperature")
plt.xlabel("Month")
plt.ylabel("Temperature")
plt.show()

daily_data.head()

# Display the column names
print(daily_data.columns)

"""Correlation Matrix with Pairplot"""

# Pairplot to explore relationships between variables
sns.pairplot(daily_data[['7.0', '20.0', '46.0']])
plt.title("Pairplot of Climate Variables")
plt.show()

""" Interactive Visualization (Optional)

"""

import plotly.express as px

# Interactive time series plot
fig = px.line(daily_data, x='2015-01-01T23:59:00', y='7.0', title='Interactive Temperature Over Time')
fig.show()

# Interactive scatter plot with trendline
fig = px.scatter(daily_data, x='46.0', y='7.0', trendline='ols',
                 title='Interactive Scatter Plot of Temperature vs Humidity')

fig.show()

"""Wind Rose for Wind Data (if available)"""

pip install windrose

from windrose import WindroseAxes
from matplotlib import pyplot as plt

hourly_data.head()

# Display the column names
print(hourly_data.columns)

# Ensure the columns are numeric
hourly_data['150'] = pd.to_numeric(hourly_data['150'], errors='coerce')  # Replace '150' with your actual wind direction column name
hourly_data['10.1'] = pd.to_numeric(hourly_data['10.1'], errors='coerce')  # Replace '10.1' with your actual wind speed column name

# Drop rows where either column is NaN after conversion
#        hourly_data = hourly_data.dropna(subset=['150', '10.1'])

# Create the wind rose plot
ax = WindroseAxes.from_ax()
ax.bar(hourly_data['150'], hourly_data['10.1'], normed=True, opening=0.8, edgecolor='white')
ax.set_legend()
plt.title("Wind Rose")
plt.show()

"""Clustering Analysis (Advanced)"""

from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

daily_data.head()

# Display the column names
print(daily_data.columns)

"""TemperatureColumn Name : 7.0
PrecipitationColumnName: 20.0
HumidityColumnName: 46.0
"""

# Standardize the data
scaler = StandardScaler()
scaled_data = scaler.fit_transform(daily_data[['7.0', '46.0', '20.0']])

# K-means clustering
kmeans = KMeans(n_clusters=4, random_state=42)
daily_data['Cluster'] = kmeans.fit_predict(scaled_data)

# Plot clusters
plt.scatter(daily_data['2015-01-01T23:59:00'], daily_data['7.0'], c=daily_data['Cluster'], cmap='viridis')
plt.title("Clustering of Daily Temperature Patterns")
plt.xlabel("Date")
plt.ylabel("Temperature")
plt.show()

"""Anomaly Detection (Advanced)"""

from sklearn.ensemble import IsolationForest

# Isolation Forest for anomaly detection
iso_forest = IsolationForest(contamination=0.01)
daily_data['Anomaly'] = iso_forest.fit_predict(scaled_data)

print(daily_data.columns)

# Highlight anomalies
plt.scatter(daily_data['2015-01-01T23:59:00'], daily_data['7.0'], c=daily_data['Anomaly'], cmap='coolwarm')
plt.title("Anomaly Detection in Temperature Data")
plt.xlabel("Date")
plt.ylabel("Temperature")
plt.show()

