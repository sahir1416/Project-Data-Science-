# -*- coding: utf-8 -*-
"""Task 1 .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SNr7Zqm1ZjfFLRwYKjb8bqet-2ZNJ31s
"""

# Import Necessary Libaries

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

df  = pd.read_csv("house_prices.csv")

df.head()

# 1. Handle missing values
# Fill missing values with the mean of the column
#df.fillna(df.mean(), inplace=True)
df.fillna(df.mean(numeric_only=True), inplace=True)#

# Check for any remaining NaN values
print("Remaining NaN values:\n", df.isna().sum())

# 2. Handle outliers
# For simplicity, let's assume 'SalePrice' is the target and we handle outliers in numerical features
numerical_features = df.select_dtypes(include=[np.number]).columns.tolist()

for feature in numerical_features:
    # Calculate the 1st and 3rd quartile
    Q1 = df[feature].quantile(0.25)
    Q3 = df[feature].quantile(0.75)
    IQR = Q3 - Q1
    # Define outlier boundaries
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    # Replace outliers with the median
    median = df[feature].median()
    df[feature] = np.where((df[feature] < lower_bound) | (df[feature] > upper_bound), median, df[feature])

#3. Normalize or scale features
# Ensure no NaN values remain in numerical features
df[numerical_features] = df[numerical_features].fillna(df[numerical_features].mean())

# Check for constant columns and remove them if necessary
df = df.loc[:, (df != df.iloc[0]).any()]

df.head()

scaler = StandardScaler()
df[numerical_features] = scaler.fit_transform(df[numerical_features])

# 4. Split the data into training and testing sets
# Assuming 'SalePrice' is the target variable
X = df.drop('Amount(in rupees)', axis=1)
y = df['Amount(in rupees)']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Display the processed data
print("Training Features:\n", X_train.head())
print("Testing Features:\n", X_test.head())
print("Training Target:\n", y_train.head())
print("Testing Target:\n", y_test.head())